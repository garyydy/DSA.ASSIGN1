{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2a0c4230",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'null' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8812/1621850432.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m    310\u001b[0m   {\n\u001b[0;32m    311\u001b[0m    \u001b[1;34m\"cell_type\"\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;34m\"code\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 312\u001b[1;33m    \u001b[1;34m\"execution_count\"\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnull\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    313\u001b[0m    \u001b[1;34m\"id\"\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;34m\"63a9cbb1\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    314\u001b[0m    \u001b[1;34m\"metadata\"\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'null' is not defined"
     ]
    }
   ],
   "source": [
    "{\n",
    " \"cells\": [\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 6,\n",
    "   \"id\": \"0206516d\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"8\\n\",\n",
    "      \"(1, 7)\\n\",\n",
    "      \"(2, 6)\\n\",\n",
    "      \"(3, 5)\\n\",\n",
    "      \"(5, 3)\\n\",\n",
    "      \"(6, 2)\\n\",\n",
    "      \"(7, 1)\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?\\n\",\n",
    "    \"num= int(input())\\n\",\n",
    "    \"l=[1,2,3,5,6,7,9]\\n\",\n",
    "    \"for i in l:\\n\",\n",
    "    \"    for j in l:\\n\",\n",
    "    \"        if (i+j)==num:\\n\",\n",
    "    \"            print((i,j))\\n\",\n",
    "    \"\\n\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 7,\n",
    "   \"id\": \"a4c43cb3\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"[5, 4, 3, 2]\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.\\n\",\n",
    "    \"l=[1,2,3,4,5]\\n\",\n",
    "    \"print(l[4:0:-1])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 25,\n",
    "   \"id\": \"d8bdae13\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"adi\\n\",\n",
    "      \"iad\\n\",\n",
    "      \"strings are nit matched\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.\\n\",\n",
    "    \"s1=str(input())\\n\",\n",
    "    \"s2=str(input())\\n\",\n",
    "    \"a=len(s1)\\n\",\n",
    "    \"if len(s1)==len(s2):\\n\",\n",
    "    \"\\n\",\n",
    "    \"    i=0\\n\",\n",
    "    \"    while a!=0:\\n\",\n",
    "    \"        if s1[a-1]==s2[i]:\\n\",\n",
    "    \"            i=i+1\\n\",\n",
    "    \"            a=a-1\\n\",\n",
    "    \"            continue\\n\",\n",
    "    \"        else:\\n\",\n",
    "    \"            print(\\\"strings are not matched\\\")\\n\",\n",
    "    \"            break\\n\",\n",
    "    \"    if a==0:\\n\",\n",
    "    \"        print(\\\"strrings matched\\\")\\n\",\n",
    "    \"else:\\n\",\n",
    "    \"    print(\\\"strings are not matched\\\")\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 14,\n",
    "   \"id\": \"0dccb39d\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 14,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q4. Write a program to print the first non-repeated character from a string?\\n\",\n",
    "    \"st=\\\"sasddfrf\\\"\\n\",\n",
    "    \"a=len(st)\\n\",\n",
    "    \"for i in st:\\n\",\n",
    "    \"    for j in st[k:a]:\\n\",\n",
    "    \"        if i==j:\\n\",\n",
    "    \"            break\\n\",\n",
    "    \"        else\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    \"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 30,\n",
    "   \"id\": \"b861d4c8\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"Move disk 1 from source A to destination B\\n\",\n",
    "      \"Move disk 2 from source A to destination C\\n\",\n",
    "      \"Move disk 1 from source B to destination C\\n\",\n",
    "      \"Move disk 3 from source A to destination B\\n\",\n",
    "      \"Move disk 1 from source C to destination A\\n\",\n",
    "      \"Move disk 2 from source C to destination B\\n\",\n",
    "      \"Move disk 1 from source A to destination B\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.def TowerOfHanoi(n , source, destination, auxiliary):\\n\",\n",
    "    \"    if n==1:\\n\",\n",
    "    \"        print (\\\"Move disk 1 from source\\\",source,\\\"to destination\\\",destination)\\n\",\n",
    "    \"        return\\n\",\n",
    "    \"    TowerOfHanoi(n-1, source, auxiliary, destination)\\n\",\n",
    "    \"    print (\\\"Move disk\\\",n,\\\"from source\\\",source,\\\"to destination\\\",destination)\\n\",\n",
    "    \"    TowerOfHanoi(n-1, auxiliary, destination, source)\\n\",\n",
    "    \"          \\n\",\n",
    "    \"# Driver code\\n\",\n",
    "    \"n = 3\\n\",\n",
    "    \"TowerOfHanoi(n,'A','B','C') \\n\",\n",
    "    \"# A, C, B are the name of rods\\n\",\n",
    "    \"  \"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 61,\n",
    "   \"id\": \"2272d837\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"'*-L/KA-/CBA'\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 61,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"def  isoperator(char):\\n\",\n",
    "    \"    if char in ('+','-','*','/'):\\n\",\n",
    "    \"        return True\\n\",\n",
    "    \"    else: \\n\",\n",
    "    \"        False\\n\",\n",
    "    \"\\n\",\n",
    "    \"def posttopre(postfix_exp):\\n\",\n",
    "    \"    stack=[]\\n\",\n",
    "    \"    length= len(postfix_exp)\\n\",\n",
    "    \"    for i in postfix_exp:\\n\",\n",
    "    \"        if isoperator(i):\\n\",\n",
    "    \"            pop1=stack.pop()\\n\",\n",
    "    \"            pop2=stack.pop()\\n\",\n",
    "    \"            temp= i+ pop1+pop2\\n\",\n",
    "    \"            stack.append(temp)\\n\",\n",
    "    \"        else:\\n\",\n",
    "    \"            stack.append(i)\\n\",\n",
    "    \"            \\n\",\n",
    "    \"    ans=''\\n\",\n",
    "    \"    while(stack):\\n\",\n",
    "    \"        ans= ans + stack.pop()\\n\",\n",
    "    \"    return ans\\n\",\n",
    "    \"\\n\",\n",
    "    \"postfix_exp= \\\"ABC/-AK/L-*\\\"\\n\",\n",
    "    \"posttopre(postfix_exp)\\n\",\n",
    "    \"        \\n\",\n",
    "    \"    \"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 63,\n",
    "   \"id\": \"af4668ba\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"10\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"# Write a program to find the smallest number using a stack.\\n\",\n",
    "    \"l1=[12,34,10,89,95]\\n\",\n",
    "    \"min =l1[0]\\n\",\n",
    "    \"for i in l1:\\n\",\n",
    "    \"    if i<min:\\n\",\n",
    "    \"        min=i\\n\",\n",
    "    \"print(min)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 33,\n",
    "   \"id\": \"4b12c12f\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"collections.deque\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 33,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"#Q9. Write a program to reverse a stack.\\n\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 38,\n",
    "   \"id\": \"c2465ce5\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 38,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a+i\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 40,\n",
    "   \"id\": \"5043ec01\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"ai\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"temp ='a' +'i'\\n\",\n",
    "    \"print(temp)\\n\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 44,\n",
    "   \"id\": \"40627362\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"[1]\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a=[]\\n\",\n",
    "    \"a.append(1)\\n\",\n",
    "    \"print(a)\\n\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"id\": \"63a9cbb1\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": []\n",
    "  }\n",
    " ],\n",
    " \"metadata\": {\n",
    "  \"kernelspec\": {\n",
    "   \"display_name\": \"Python 3 (ipykernel)\",\n",
    "   \"language\": \"python\",\n",
    "   \"name\": \"python3\"\n",
    "  },\n",
    "  \"language_info\": {\n",
    "   \"codemirror_mode\": {\n",
    "    \"name\": \"ipython\",\n",
    "    \"version\": 3\n",
    "   },\n",
    "   \"file_extension\": \".py\",\n",
    "   \"mimetype\": \"text/x-python\",\n",
    "   \"name\": \"python\",\n",
    "   \"nbconvert_exporter\": \"python\",\n",
    "   \"pygments_lexer\": \"ipython3\",\n",
    "   \"version\": \"3.9.7\"\n",
    "  }\n",
    " },\n",
    " \"nbformat\": 4,\n",
    " \"nbformat_minor\": 5\n",
    "}\n",
    "\n",
    "dfsgsfg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "37c3af37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Stack\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "\n",
      "Stack after Reversing\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "class Stack:\n",
    " \n",
    "    # create empty list\n",
    "    def __init__(self):\n",
    "        self.Elements = []\n",
    "         \n",
    "    # push() for insert an element\n",
    "    def push(self, value):\n",
    "        self.Elements.append(value)\n",
    "       \n",
    "    # pop() for remove an element\n",
    "    def pop(self):\n",
    "        return self.Elements.pop()\n",
    "     \n",
    "    # empty() check the stack is empty of not\n",
    "    def empty(self):\n",
    "        return self.Elements == []\n",
    "    def show(self):\n",
    "        for value in reversed(self.Elements):\n",
    "            print(value)\n",
    " \n",
    "# Insert_Bottom() insert value at bottom\n",
    "def BottomInsert(s, value):\n",
    "   \n",
    "    # check the stack is empty or not\n",
    "    if s.empty():\n",
    "         \n",
    "        # if stack is empty then call\n",
    "        # push() method.\n",
    "        s.push(value)\n",
    "    else:\n",
    "        popped = s.pop()\n",
    "        BottomInsert(s, value)\n",
    "        s.push(popped)\n",
    " \n",
    "# Reverse() reverse the stack\n",
    "def Reverse(s):\n",
    "    if s.empty():\n",
    "        pass\n",
    "    else:\n",
    "        popped = s.pop()\n",
    "        Reverse(s)\n",
    "        BottomInsert(s, popped)\n",
    "stk = Stack()\n",
    " \n",
    "stk.push(1)\n",
    "stk.push(2)\n",
    "stk.push(3)\n",
    "stk.push(4)\n",
    "stk.push(5)\n",
    " \n",
    "print(\"Original Stack\")\n",
    "stk.show()\n",
    " \n",
    "print(\"\\nStack after Reversing\")\n",
    "Reverse(stk)\n",
    "stk.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7451dc22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(())\n",
      "Parenthesis are not Balanced!\n"
     ]
    }
   ],
   "source": [
    "#Q8. Write a program to check if all the brackets are closed in a given code snippet.\n",
    "class Stack():\n",
    "    def __init__(self, size):\n",
    "        self.data = []\n",
    "        self.size = size\n",
    "        self.length = 0\n",
    "        self.top = None\n",
    "        \n",
    "    def push(self, item):\n",
    "        if self.length < self.size:\n",
    "            self.data.append(item)\n",
    "            self.length += 1\n",
    "            self.top = item\n",
    "        else:\n",
    "            print('STACK OVERFLOW!!')\n",
    "    \n",
    "    def pop(self):\n",
    "        if self.length == 0:\n",
    "            print('STACK UNDERFLOW!!')\n",
    "            return None\n",
    "        else:\n",
    "            popped_item = self.data.pop()\n",
    "            self.length -= 1\n",
    "            if self.length == 0:\n",
    "                self.top = None\n",
    "            else:\n",
    "                self.top = self.data[-1]\n",
    "            return popped_item\n",
    "    def peek(self):\n",
    "            return self.top\n",
    "    \n",
    "    def isEmpty(self):\n",
    "        return not bool(self.length)\n",
    "    \n",
    "    def length(self):\n",
    "        return self.length\n",
    "    \n",
    "    def display(self):\n",
    "        print('Printing items from top to bottom...')\n",
    "        for i in self.data[::-1]:\n",
    "            print(i)\n",
    "            \n",
    "stack_obj = Stack(20)\n",
    "expression = input()\n",
    "partner = {']':'[',')':'(','}':'{'}\n",
    "for char in expression:\n",
    "    if char in partner.values():\n",
    "        stack_obj.push(char)\n",
    "    else:\n",
    "        if stack_obj.length == 0:\n",
    "            print('Parenthesis are not Balanced!')\n",
    "            break\n",
    "        else:\n",
    "            if partner[char] == stack_obj.peek():\n",
    "                stack_obj.pop()\n",
    "            else:\n",
    "                print('Parenthesis are not Balanced!')\n",
    "                break\n",
    "else:\n",
    "    if stack_obj.length != 0:\n",
    "         print('Parenthesis are Balanced!')\n",
    "    else:\n",
    "        print('Parenthesis are not Balanced!')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3fdae37",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
